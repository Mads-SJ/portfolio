{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","Math","random","toString","slice","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAsCeA,MAnCf,YAAgC,IAAZC,EAAW,EAAXA,QAClB,EAAwBC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAHb,mBAAOC,EAAP,KAAaC,EAAb,KAoBA,OACE,uBAAMC,UAAU,YAAYC,SAX9B,SAAsBC,GAGpB,GAFAA,EAAEC,iBAEEL,EAAKF,KAAKQ,OAAQ,CACpB,IAAMT,EAAKU,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAC5Cf,EAAQ,2BAAKK,GAAN,IAAYH,GAAIA,KACvBI,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,QAK3B,UACE,cAACa,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOf,EAAKF,KACZkB,SArBN,SAA+BZ,GAC7BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEa,OAAOF,YAsBhC,cAACG,EAAA,EAAD,CAAQL,KAAK,SAAb,wB,qDCFSM,MA3Bf,YAAqD,IAArCnB,EAAoC,EAApCA,KAAMoB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASpC,OACE,eAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,QAA5B,UACE,cAACC,EAAA,EAAD,CAAUC,QAAS1B,EAAKD,UAAW4B,QAVvC,WACEP,EAAepB,EAAKH,OAUlB,cAAC+B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgB9B,EAAKD,UAAY,eAAiB,MAHtD,SAMGC,EAAKF,OAER,cAACiC,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWrB,EAAKH,KAcd,SACE,cAAC,IAAD,U,SCNOmC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACzC,OACE,cAACa,EAAA,EAAD,UACGD,EAAME,KAAI,SAACnC,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNoB,eAAgBA,EAChBC,WAAYA,GAHPrB,EAAKH,UCHduC,EAAoB,qBAsDXC,MApDf,WACE,MAA0BzC,mBAAS,IAAnC,mBAAOqC,EAAP,KAAcK,EAAd,KAoCA,OAlCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IAEjDI,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MACtD,CAACA,IAyBF,sBAAK/B,UAAU,MAAf,UACE,cAAC0B,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,KAA5C,wBAGA,cAAC,EAAD,CAAUlC,QA3Bd,SAAiBK,GACfsC,EAAS,CAACtC,GAAF,mBAAWiC,QA2BjB,cAAC,EAAD,CACEA,MAAOA,EACPb,eA1BN,SAAwBvB,GACtByC,EACEL,EAAME,KAAI,SAACnC,GACT,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAkBPqB,WAbN,SAAoBxB,GAClByC,EAASL,EAAMe,QAAO,SAAChD,GAAD,OAAUA,EAAKH,KAAOA,aC9BjCoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.126b2ce1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (todo.task.trim()) {\r\n      const id = Math.random().toString(16).slice(2);\r\n      addTodo({ ...todo, id: id });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      <TextField\r\n        label=\"Task\"\r\n        type=\"text\"\r\n        name=\"task\"\r\n        value={todo.task}\r\n        onChange={handleTaskInputChange}\r\n      />\r\n      <Button type=\"submit\">submit</Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null,\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { List } from \"@material-ui/core\";\r\n\r\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\r\n  return (\r\n    <List>\r\n      {todos.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          toggleComplete={toggleComplete}\r\n          removeTodo={removeTodo}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-storage\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography style={{ padding: 16 }} variant=\"h1\">\n        React Todo\n      </Typography>\n      <TodoForm addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        toggleComplete={toggleComplete}\n        removeTodo={removeTodo}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
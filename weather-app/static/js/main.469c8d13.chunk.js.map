{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","blur","name","sys","country","Date","toDateString","Math","round","icon","description","setWeatherIcon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACC,mCADDA,EAEE,2CAkFOC,MA/Ef,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAyCA,OACE,qBAAKC,UA1BuB,qBAAjBF,EAAQG,MAAwBH,EAAQG,KAAKC,KAAO,GACtD,WAEF,MAuBP,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WAjDV,SAAgBH,GACA,UAAVA,EAAEI,MACJC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDmB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,MAEhBT,EAAEC,OAAOW,aA2CiB,oBAAhBpB,EAAQG,KACd,qBAAKD,UAAU,YAAf,SACE,gCACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKrB,UAAU,OAAf,UAAuB,IAAIsB,MAAOC,oBAEpC,sBAAKvB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBwB,KAAKC,MAAM3B,EAAQG,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SA3Cd,WACE,IAAI0B,EAUJ,MATgC,WAA5B5B,EAAQA,QAAQ,GAAGG,OACrByB,EAAO,mBAAG1B,UAAU,kBAEU,UAA5BF,EAAQA,QAAQ,GAAGG,OACrByB,EAAO,mBAAG1B,UAAU,gBAEU,SAA5BF,EAAQA,QAAQ,GAAGG,OACrByB,EAAO,mBAAG1B,UAAU,uBAGpB,gCACG0B,EACD,6BAAK5B,EAAQA,QAAQ,GAAG6B,iBA6BUC,aAKhC,sFCnEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.469c8d13.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst api = {\n  key: \"3ef5b256d7f0feb3e011e270c549105d\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  function search(e) {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n      e.target.blur();\n    }\n  }\n\n  function setBackground() {\n    if (typeof weather.main !== \"undefined\" && weather.main.temp > 16) {\n      return \"app warm\";\n    }\n    return \"app\";\n  }\n\n  function setWeatherIcon() {\n    let icon;\n    if (weather.weather[0].main === \"Clouds\")\n      icon = <i className=\"fas fa-cloud\"></i>;\n\n    if (weather.weather[0].main === \"Clear\")\n      icon = <i className=\"fas fa-sun\"></i>;\n\n    if (weather.weather[0].main === \"Rain\")\n      icon = <i className=\"fas fa-cloud-rain\"></i>;\n\n    return (\n      <div>\n        {icon}\n        <h2>{weather.weather[0].description}</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div className={setBackground()}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div className=\"container\">\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weather.name}, {weather.sys.country}\n                </div>\n                <div className=\"date\">{new Date().toDateString()}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n                <div className=\"weather\">{setWeatherIcon()}</div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <h2>Couldn't find the city you were looking for...</h2>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}